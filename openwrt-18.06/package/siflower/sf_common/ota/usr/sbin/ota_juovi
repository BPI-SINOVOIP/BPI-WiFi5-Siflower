#!/bin/sh

usage() {
    echo "usage"
}

version_compare() {
    ota_version=$1
    current_version=$2

    if [ "$ota_version" -gt "$current_version" ]; then
        return 1
    else
        return 0
    fi
}

auto_ota() {
    local device_model=$1
    local url=$(uci get basic_setting.ota.url)
    local post_url="$url/ota/GET/i/zowee/WiFi5AC1200GigabitRouter/$device_model"

    echo "$post_url" > dev/console
    # Perform the curl request and capture the response
    response=$(curl -s $post_url)

    # Extract values from the JSON response using sed
    downloadUrl=$(echo "$response" | sed -n 's/.*"url": "\([^"]*\)".*/\1/p')
    md5Str=$(echo "$response" | sed -n 's/.*"file_checksum": "\([^"]*\)".*/\1/p')
    ota_version=$(echo "$response" | sed -n 's/.*"version": "\([^"]*\)".*/\1/p')

    if [ -z "$downloadUrl" ]; then
        echo "Error: downloadUrl is empty" > /dev/console
        update_fail_config "downloadUrl is empty"
        exit 1
    fi

    current_version=$(uci get basic_setting.ota.version)

    version_compare "$ota_version" "$current_version"
    need_upgrade=$?

    if [ $need_upgrade -eq 0 ]; then
        echo "No need to upgrade" > /dev/console
        update_fail_config "No need to upgrade"
        exit 1
    fi

    # Download the file
    rm /tmp/firmware.bin > /dev/null 2>&1
    curl -s -o /tmp/firmware.bin "$downloadUrl"
    download_result=$?

    # Check the result of the download
    if [ $download_result -eq 0 ]; then
        download_md5sum=$(md5sum /tmp/firmware.bin | awk '{print $1}')
        echo "$download_md5sum $md5Str"
        if [ "$download_md5sum" = "$md5Str" ]; then
            echo "Download successful" > /dev/console
        else
            echo "Download checksum error" > /dev/console
            update_fail_config "Download checksum error"
            rm /tmp/firmware.bin > /dev/null 2>&1
            exit 1
        fi
    else
        echo "Download failed" > /dev/console
        update_fail_config "Download failed"
        rm /tmp/firmware.bin > /dev/null 2>&1
        exit 1
    fi

    upgrade_prepare $md5Str $ota_version

    ubus call luci2.system upgrade_start
}

request_url() {
    local device_model=$(uci get basic_setting.ota.romtype)
    local url=$(uci get basic_setting.ota.url)
    local post_url="$url/ota/GET/i/zowee/WiFi5AC1200GigabitRouter/$device_model"

    echo "$post_url" > dev/console
    # Perform the curl request and capture the response
    response=$(curl -s $post_url)

    # Extract values from the JSON response using sed
    downloadUrl=$(echo "$response" | sed -n 's/.*"url": "\([^"]*\)".*/\1/p')
    md5Str=$(echo "$response" | sed -n 's/.*"file_checksum": "\([^"]*\)".*/\1/p')
    ota_version=$(echo "$response" | sed -n 's/.*"version": "\([^"]*\)".*/\1/p')

    uci set basic_setting.ota.downloadUrl=$downloadUrl
    uci set basic_setting.ota.md5Str=$md5Str
    uci set basic_setting.ota.ota_version=$ota_version
    uci commit basic_setting
}

update_fail_config() {
    uci set basic_setting.ota_confirm_fail='setting'
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    uci set basic_setting.ota_confirm_fail.updatetime="$current_time"
    uci set basic_setting.ota_confirm_fail.fail_reason="$1"

    uci commit basic_setting
}

update_config() {
    uci set basic_setting.ota_confirm='setting'
    local current_time=$(date '+%Y-%m-%d %H:%M:%S')
    uci set basic_setting.ota_confirm.updatetime="$current_time"
    uci set basic_setting.ota_confirm.md5sum="$1"
    uci set basic_setting.ota_confirm.ota_ver="$2"
    uci set basic_setting.ota.version="$2"
    uci commit basic_setting
}

upgrade_prepare() {
    echo 3 > /proc/sys/vm/drop_caches
    update_config $1 $2
}

case "$1" in
    auto_ota)
        rm /tmp/firmware.bin > /dev/null 2>&1
        auto_ota_en=$(uci get basic_setting.auto_ota.enable)
        if [ $auto_ota_en -eq 1 ]; then
            romtype=$(uci get basic_setting.ota.romtype)
            auto_ota "$romtype"
        fi
        ;;
    request_url)
        request_url "$romtype"
        ;;
    upgrade_prepare)
        if [ "$#" -ne 3 ]; then
            echo "Error: Invalid number of arguments for 'update_config'"
            usage
            exit 1
        fi
        upgrade_prepare "$2" "$3"
        ;;
    *|--help|help)
        usage
        ;;
esac
